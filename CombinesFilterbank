import os
import re
import numpy as np
import matplotlib
matplotlib.use('QtAgg')
import matplotlib.pyplot as plt
from blimpy import Waterfall
from your.formats.filwriter import make_sigproc_object
# Function to extract the number after "chan" in the filename
def extract_chan_number(filename):
    match = re.search(r'chan(\d{3})', filename)
    if match:
        return int(match.group(1))
    else:
        return -1
# Directory containing input files
input_directory = "/Users/estherkim/Documents/All/"
output_file_path = "/Users/estherkim/Documents/All/combined.fil"
output_plot_file = "/Users/estherkim/Documents/All/foo.fil"
# Number of data points to append from each file per iteration
num_points_to_append = 131072
# Get a list of all .fil files in the directory
fil_files = [f for f in os.listdir(input_directory) if f.endswith('.fil')]
# Sort .fil files based on the number after "chan"
fil_files_sorted = sorted(fil_files, key=extract_chan_number)
# Verify sorting
print("Sorted .fil files:")
for f in fil_files_sorted:
    print(f"{f}: {extract_chan_number(f)}")
# Get full paths for the sorted files
input_files = [os.path.join(input_directory, f) for f in fil_files_sorted]
# Check if there are any files to process
if not input_files:
    raise Exception(f"No files found in the directory {input_directory}")
# Initialize file pointers for each file
file_pointers = {file: open(file, 'rb') for file in input_files}
try:
    while True:
        data_appended = False
        for file, pointer in file_pointers.items():
            # Read the next chunk of data points
            data = np.fromfile(pointer, dtype=np.uint32, count=num_points_to_append)
            if data.size > 0:
                # Append the data points to the output file
                with open(output_file_path, 'ab') as output_file:
                    data.tofile(output_file)
                data_appended = True
        # If no data was appended, break the loop
        if not data_appended:
            break
finally:
    # Close all file pointers
    for pointer in file_pointers.values():
        pointer.close()
print(f"Appended data points from all files in {input_directory} to {output_file_path}")
# Read the combined data from the output file
fullfile = np.fromfile(output_file_path, dtype=np.uint32, count=-1)
nspec = int(len(fullfile) / num_points_to_append)  # number of spectra in file
# Read the data again for appending to sigproc object
data = np.fromfile(output_file_path, dtype=np.uint32)
# Create a sigproc object and write the header
sigproc_object = make_sigproc_object(
    rawdatafile="foo.fil",
    source_name="bar",
    nchans=131072,
    foff=-0.1,  # MHz
    fch1=2000,  # MHz
    tsamp=256e-6,  # seconds
    tstart=59246,  # MJD
    src_raj=112233.44,  # HHMMSS.SS
    src_dej=112233.44,  # DDMMSS.SS
    machine_id=0,
    nbeams=0,
    ibeam=0,
    nbits=32,
    nifs=1,
    barycentric=0,
    pulsarcentric=0,
    telescope_id=6,
    data_type=0,
    az_start=-1,
    za_start=-1,
)
sigproc_object.write_header(output_plot_file)
sigproc_object.append_spectra(data.astype(np.uint32), output_plot_file)
# Plot the data using blimpy
fb = Waterfall(output_plot_file)
plt.figure(figsize=(10, 6))
fb.plot_waterfall()
plt.show()
